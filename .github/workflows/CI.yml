name: CI

env:
  DEBUG: napi:*
  APP_NAME: emoji-js
  MACOSX_DEPLOYMENT_TARGET: '10.13'

permissions:
  contents: write
  id-token: write

on:
  push:
    branches:
      - master
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null

jobs:
  build:
    name: stable - ${{ matrix.runner.target }} - node@${{ matrix.node }}
    runs-on: ${{ matrix.runner.host }}
    container: ${{ matrix.runner.docker }}
    strategy:
      fail-fast: false
      matrix:
        node: [20]
        runner:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              pnpm build
              strip -x *.node

          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: pnpm build

          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: debian:latest
            build: |
              pnpm build --target x86_64-unknown-linux-gnu
              strip *.node

    steps:
      - uses: actions/checkout@v3

      - name: Install packages
        if: ${{ matrix.runner.docker }}
        shell: bash
        run: |
          apt-get update
          apt-get install curl llvm-15 clang-15 lld-15 libc++-15-dev libc++abi-15-dev xz-utils rcs git make cmake ninja-build glibc-source pkg-config libssl-dev libfontconfig1-dev libx11-dev libxcomposite-dev libgl1-mesa-dev libglu1-mesa-dev freeglut3-dev libfreetype6-dev -y

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: pnpm

      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.runner.target }}

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.runner.target }}-cargo-${{ matrix.runner.host }}

      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ matrix.runner.target == 'armv7-unknown-linux-gnueabihf' }}
        with:
          version: 0.10.1

      - name: Setup toolchain
        run: ${{ matrix.runner.setup }}
        if: ${{ matrix.runner.setup }}
        shell: bash

      - name: Setup node x86
        if: matrix.runner.target == 'i686-pc-windows-msvc'
        run: pnpm config set supportedArchitectures.cpu "ia32"
        shell: bash

      - name: Install dependencies
        run: pnpm install

      - name: Setup node x86
        uses: actions/setup-node@v3
        if: matrix.runner.target == 'i686-pc-windows-msvc'
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: pnpm
          architecture: x86

      - name: Build
        run: ${{ matrix.runner.build }}
        shell: bash

      - name: Upload artifact (bindings)
        uses: actions/upload-artifact@v3
        with:
          name: bindings-${{ matrix.runner.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  
      - name: Upload artifact (js)
        if: ${{ matrix.runner.host == 'ubuntu-latest' }}
        uses: actions/upload-artifact@v3
        with:
          name: js-files
          path: |
            index.js
            index.d.ts
          if-no-files-found: error

  test-binding:
    name: Test bindings on ${{ matrix.os }} - node@${{ matrix.node }}
    runs-on: ${{ matrix.os }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [16, 18, 20]
          
    steps:
      - uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: .

      - name: Move artifacts
        shell: bash
        run: |
          mv js-files/* . && rm -rf js-files
          mv bindings-*/* . && rm -rf bindings-*

      - name: List packages
        run: ls -R .
        shell: bash

      - name: Test bindings
        run: pnpm test

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test-binding

    steps:
      - uses: actions/checkout@v3

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20
          check-latest: true
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Move js files
        run: mv artifacts/js-files/* . && rm -rf artifacts/js-files
        shell: bash

      - name: Move artifacts
        run: pnpm artifacts

      - name: List packages
        run: ls -R ./npm
        shell: bash

      - name: Publish
        run: |
          if git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --access public
          elif git log -1 --pretty=%B | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm publish --tag next --access public
          else
          echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
